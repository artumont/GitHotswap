name: Go CI/CD

on:
  push:
    branches: [ "main" ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write
  discussions: write
  packages: write
  pull-requests: write

jobs:
  validate-commits:
    name: Validate Commits
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Install commitlint
        run: |
          npm install --global @commitlint/cli @commitlint/config-conventional
      
      - name: Copy commitlint config
        run: cp .github/commitlint.config.js commitlint.config.js
      
      - name: Validate commits
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            commitlint --from ${{ github.event.pull_request.base.sha }} --to ${{ github.event.pull_request.head.sha }} --verbose
          else
            commitlint --from ${{ github.event.before }} --to ${{ github.event.after }} --verbose
          fi
        shell: bash

  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          check-latest: true

      - name: Go Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest

      - name: Lint
        run: golangci-lint run ./...

      - name: Test
        run: |
          go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
    
      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.txt
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build:
    name: Build and Release
    needs: [test]
    runs-on: windows-latest
    
    steps:
      - uses: actions/checkout@v4
    
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          check-latest: true
        
      - name: Go Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
        
      - name: Build
        run: |
          mkdir -p bin/
          go build -v -o ./bin/git-hotswap.exe ./cmd/githotswap
    
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: git-hotswap-windows-amd64
          path: bin/git-hotswap.exe
        
      - name: Generate Release Changelog
        id: changelog
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        uses: mikepenz/release-changelog-builder-action@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          configurationJson: |
            {
              "template": "#{{CHANGELOG}}\n\n<details>\n<summary>Uncategorized</summary>\n\n#{{UNCATEGORIZED}}\n</details>",
              "categories": [
                {
                  "title": "## üöÄ Features",
                  "labels": ["feature", "enhancement", "feat"]
                },
                {
                  "title": "## üêõ Fixes",
                  "labels": ["fix", "bug"]
                },
                {
                  "title": "## üìù Documentation",
                  "labels": ["documentation", "docs"]
                },
                {
                  "title": "## üî® Maintenance",
                  "labels": ["chore", "style", "refactor"]
                }
              ],
              "pr_template": "- #{{NUMBER}} - {{TITLE}}"
            }
        
      - name: Create Release
        uses: softprops/action-gh-release@v2
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        with:
          make_latest: true
          name: Version ${{ github.ref_name }}
          body: ${{ steps.changelog.outputs.changelog }}
          files: |
            bin/*
          fail_on_unmatched_files: true
          generate_release_notes: true
